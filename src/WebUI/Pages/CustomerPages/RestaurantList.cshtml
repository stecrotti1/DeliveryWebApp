@page
@using DeliveryWebApp.Infrastructure.Identity
@using IdentityServer4.Extensions
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager
@model DeliveryWebApp.WebUI.Pages.CustomerPages.RestaurantListModel
@{
    ViewData["Title"] = "Food vendors list";
    Layout = "../Views/_RestaurantListLayout";
}
@* TODO: localize *@

@section Head
{
    <link
        href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700" rel="stylesheet"/>

    <script src="https://api.tiles.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js"></script>

    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" type="text/css"/>
    <link href="https://api.tiles.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css" rel="stylesheet"/>
    <link rel="stylesheet" href="/css/restaurant-list.min.css"/>
    <link rel="stylesheet" href="/css/images.min.css"/>
}

@if (Model.Customer.Addresses.IsNullOrEmpty())
{
    <div class="alert alert-warning" role="alert">
        In order to buy from food vendors you have to register at least 1 address to your profile.
        <br/>
        Go to your <a asp-area="Identity" asp-page="/Account/Manage/Address" class="alert-link">profile</a> to set one.
    </div>
}
else
{
    @if (Model.Restaurants.IsNullOrEmpty())
    {
        <div class="alert alert-secondary" role="alert">
            Unfortunately there are no food vendors at the moment.
        </div>
    }
    else
    {
        <div class="sidebar">
            <div class="heading">
                <h1>Browse food vendors</h1>
            </div>
            <div id="listings" class="listings"></div>
        </div>
        <div id="map" class="map"></div>

@section Scripts
{
    @* Geocoder plugin *@
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>

    @* Turf.js plugin *@
    <script src="https://npmcdn.com/@@turf/turf/turf.min.js"></script>

    <script type="text/javascript" src="/js/image_utilities.min.js"></script>
    <script type="text/javascript" src="/js/classes/address.min.js"></script>
    <script type="text/javascript" src="/js/classes/restaurant.min.js"></script>

    <script type="text/javascript">
        $(function() {
            if (!('remove' in Element.prototype)) {
                Element.prototype.remove = function() {
                    if (this.parentNode) {
                        this.parentNode.removeChild(this);
                    }
                };
            }

            mapboxgl.accessToken = 'pk.eyJ1Ijoic3RlY3JvdHRpMSIsImEiOiJja3Bna2kzbHYyaThoMm9ueHl1dzlnaTc1In0.EpALSOaDOmuM8XGS_IQzvA';

            let map;

            let stores = {
                "type": "FeatureCollection",
                "features": []
            };

            // get restaurants
            $.ajax({
                type: "GET",
                url: "/api/restaurateurs",
                dataType: "JSON",
                contentType: "application/json; charset=utf-8",
                success: function(data, status, xhr) {

                    for (let i = 0; i < data.length; i++) {

                        let restaurateur = new Restaurateur(
                            data[i].id,
                            data[i].restaurantName,
                            data[i].logo,
                            data[i].restaurantAddressId,
                            data[i].restaurantCategory,
                            data[i].customerId
                        );

                        $.ajax({
                            type: "GET",
                            url: `/api/addresses/${restaurateur.restaurantAddressId}`,
                            dataType: "JSON",
                            contentType: "application/json; charset=utf-8",
                            success: function(addressData, status, xhr) {

                                navigator.geolocation.getCurrentPosition(showMap);

                                let address = new Address(
                                    addressData.placeName,
                                    parseFloat(addressData.longitude),
                                    parseFloat(addressData.latitude),
                                    addressData.customerId,
                                    addressData.customerId,
                                    addressData.restaurateurId);

                                stores.features.push({
                                    "type": "Feature",
                                    "geometry": {
                                        "type": "Point",
                                        "coordinates": [address.longitude, address.latitude]
                                    },
                                    "properties": {
                                        "restaurateurId": restaurateur.id,
                                        "name": restaurateur.restaurantName,
                                        "category": restaurateur.restaurantCategory,
                                        "address": address.placeName
                                    }
                                });

                                /**
                                 * Assign a unique id to each store. This `id` is used
                                 * later to associate each point on the map with a listing
                                 * in the sidebar.
                                 */
                                stores.features.forEach(function(store, i) {
                                    store.properties.id = i;
                                });

                                function showMap(center) {
                                    map = new mapboxgl.Map({
                                        container: 'map',
                                        style: 'mapbox://styles/mapbox/streets-v11',
                                        center: [center.coords.longitude, center.coords.latitude],
                                        zoom: 12,
                                        scrollZoom: true
                                    });

                                    map.on('load',
                                        function(e) {

                                            map.addSource('places',
                                                {
                                                    'type': 'geojson',
                                                    'data': stores
                                                });

                                            const geocoder = new MapboxGeocoder({
                                                accessToken: mapboxgl.accessToken,
                                                mapboxgl: mapboxgl,
                                                marker: true,
                                                bbox: [-77.210763, 38.803367, -76.853675, 39.052643]
                                            });

                                            map.addControl(geocoder, 'top-left');

                                            geocoder.on('result',
                                                function(ev) {
                                                    const searchResult = ev.result.geometry;
                                                });

                                            buildLocationList(stores);
                                            addMarkers();
                                        });
                                }

                                function addMarkers() { // FIXME: markers not showing: TypeError
                                    /* For each feature in the GeoJSON object above: */
                                    stores.features.forEach(function(marker) {

                                        /* Create a div element for the marker. */
                                        let el = document.createElement("div");

                                        /* Assign a unique `id` to the marker. */
                                        el.id = `marker-${marker.properties.id}`;

                                        /* Assign the `marker` class to each marker for styling. */
                                        el.className = "marker";

                                        /**
                                         * Create a marker using the div element
                                         * defined above and add it to the map.
                                         **/
                                        new mapboxgl.Marker(el, { offset: [0, -23] })
                                            .setLngLat(marker.geometry.coordinates)
                                            .addTo(map);

                                        /**
                                         * Listen to the element and when it is clicked, do three things:
                                         * 1. Fly to the point
                                         * 2. Close all other popups and display popup for clicked store
                                         * 3. Highlight listing in sidebar (and remove highlight for all other listings)
                                         **/
                                        el.addEventListener("click",
                                            function(e) {
                                                /* Fly to the point */
                                                flyToStore(marker);
                                                /* Close all other popups and display popup for clicked store */
                                                createPopUp(marker);
                                                /* Highlight listing in sidebar */
                                                let activeItem = document.getElementsByClassName("active");
                                                e.stopPropagation();

                                                if (activeItem[0]) {
                                                    activeItem[0].classList.remove("active");
                                                }

                                                let listing = document.getElementById(`listing-${marker.properties.id}`);
                                                listing.classList.add("active");
                                            });
                                    });
                                }

                                /**
                                 * Add a listing for each store to the sidebar.
                                **/
                                function buildLocationList(data) {
                                    data.features.forEach(function(store, i) {
                                        const prop = store.properties;

                                        /* Add a new listing section to the sidebar. */
                                        const listings = document.getElementById("listings");

                                        const listing = listings.appendChild(document.createElement("div"));
                                        /* Assign a unique `id` to the listing. */
                                        listing.id = `listing-${prop.id}`;
                                        /* Assign the `item` class to each listing for styling. */
                                        listing.className = "item";

                                        /* Add the link to the individual listing created above. */
                                        const link = listing.appendChild(document.createElement("a"));
                                        link.href = `RestaurantDetail/${prop.restaurateurId}`;
                                        link.className = "title";
                                        link.id = `link-${prop.id}`;
                                        link.innerHTML = prop.name;

                                        /* Add details to the individual listing. */
                                        const details = listing.appendChild(document.createElement("div"));

                                        if (prop.category) {
                                            details.innerHTML += prop.category;
                                        }


                                        /**
                                         * Listen to the element and when it is clicked, do four things:
                                         * 1. Update the `currentFeature` to the store associated with the clicked link
                                         * 2. Fly to the point
                                         * 3. Close all other popups and display popup for clicked store
                                         * 4. Highlight listing in sidebar (and remove highlight for all other listings)
                                        **/
                                        link.addEventListener("click",
                                            function(e) {
                                                for (let i = 0; i < data.features.length; i++) {
                                                    if (this.id === `link-${data.features[i].properties.id}`) {
                                                        const clickedListing = data.features[i];
                                                        flyToStore(clickedListing);
                                                        createPopUp(clickedListing);
                                                    }
                                                }

                                                const activeItem = document.getElementsByClassName("active");
                                                if (activeItem[0]) {
                                                    activeItem[0].classList.remove('active');
                                                }
                                                this.parentNode.classList.add('active');
                                            });
                                    });
                                }

                                /**
                                 * Use Mapbox GL JS's `flyTo` to move the camera smoothly
                                 * a given center point.
                                **/
                                function flyToStore(currentFeature) {
                                    map.flyTo({
                                        center: currentFeature.geometry.coordinates,
                                        zoom: 15
                                    });
                                }

                                /**
                                 * Create a Mapbox GL JS `Popup`.
                                **/
                                function createPopUp(currentFeature) {
                                    const popUps = document.getElementsByClassName('mapboxgl-popup');
                                    if (popUps[0]) popUps[0].remove();

                                    const popup = new mapboxgl.Popup({ closeOnClick: false })
                                        .setLngLat(currentFeature.geometry.coordinates)
                                        .setHTML(
                                            `<h3>${currentFeature.properties.name}</h3><h4>${currentFeature.properties.address}</h4>`
                                        )
                                        .addTo(map);
                                }

                                /**
                                 * Get address for restaurant
                                 * @@param id addressId
                                 */
                                function getRestaurantAddress(id) {
                                    $.ajax({
                                        type: "GET",
                                        url: `/api/addresses/${id}`,
                                        dataType: "JSON",
                                        contentType: "application/json; charset=utf-8",
                                        success: function(data, status, xhr) {
                                            return new Address(
                                                data.placeName,
                                                data.longitude,
                                                data.latitude,
                                                data.customerId,
                                                data.restaurateurId);
                                        },
                                        error: function() {
                                            console.log(xhr);
                                            return null;
                                        }
                                    });
                                }

                            },
                            error: function() {
                                console.log(xhr);
                                return null;
                            }
                        });
                    }
                },
                error: function() {
                    console.log("Error");
                }
            });
        });
    </script>
}    }
}