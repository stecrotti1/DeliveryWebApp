@page
@using DeliveryWebApp.Infrastructure.Identity
@using IdentityServer4.Extensions
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager
@model DeliveryWebApp.WebUI.Pages.CustomerPages.RestaurantListModel
@{
    ViewData["Title"] = "Food vendors list";
}
@* TODO: localize *@

@section Head
{
    <link rel="stylesheet" href="/css/images.css"/>
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css" type="text/css"/>
    <link href="https://api.tiles.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css" rel="stylesheet"/>
    <link rel="stylesheet" href="/css/restaurant-list.css"/>
}

@if (Model.Customer.Addresses.IsNullOrEmpty())
{
    <div class="alert alert-warning" role="alert">
        In order to buy from food vendors you have to register at least 1 address to your profile.
        <br/>
        Go to your <a asp-area="Identity" asp-page="/Account/Manage/Address" class="alert-link">profile</a> to set one.
    </div>
}
else
{
    @if (Model.Restaurants.IsNullOrEmpty())
    {
        <div class="alert alert-secondary" role="alert">
            Unfortunately there are no food vendors at the moment.
        </div>
    }
    else
    {
        <div class="sidebar">
            <div class="heading">
                <h1>Browse food vendors</h1>
            </div>
            <div id="listings" class="listings"></div>
        </div>
        <div id="map" class="map"></div>

@section Scripts
{
    @* Geocoder plugin *@
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js"></script>
    <script src="https://api.tiles.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js"></script>

    @* Turf.js plugin *@
    <script src="https://npmcdn.com/@@turf/turf/turf.min.js"></script>

    <script type="text/javascript" src="/js/image_utilities.js"></script>
    <script type="text/javascript" src="/js/classes/address.js"></script>

    <script type="text/javascript">

        $(function () {
            if (!('remove' in Element.prototype)) {
                Element.prototype.remove = function() {
                    if (this.parentNode) {
                        this.parentNode.removeChild(this);
                    }
                };
            }

            mapboxgl.accessToken = 'pk.eyJ1Ijoic3RlY3JvdHRpMSIsImEiOiJja3Bna2kzbHYyaThoMm9ueHl1dzlnaTc1In0.EpALSOaDOmuM8XGS_IQzvA';

            $.ajax({
                type: "GET", // get restaurants
                url: "/api/restaurateurs",
                dataType: "JSON",
                contentType: "application/json; charset=utf-8",
                success: function(data, status, xhr) {
                    navigator.geolocation.getCurrentPosition(showMap);

                    // TODO

                    let stores = {
                        "type": "FeatureCollection",
                        "features": []
                    };

                    for (let i = 0; i < data.length; i++) {

                        let addr = getRestaurantAddress(data[i].restaurantAddressId);

                        stores.add["features"] = [
                            {
                                "type": "Feature",
                                "geometry": {
                                    "type": "Point",
                                    "coordinates": [addr.longitude, addr.latitude] // FIXME: cannot read property of undefined
                                },
                                "properties": {
                                    "name": data[i].restaurantName,
                                    "category": data[i].restaurantCategory,
                                    "address": `${addr.addressLine1}, ${addr.number}`,
                                    "city": addr.city,
                                    "country": addr.country,
                                    "postalCode": addr.postalCode,
                                    "state": addr.stateProvince
                                }
                            }
                        ];
                    }

                    function showMap(center) {
                        const map = new mapboxgl.Map({
                            container: 'map',
                            style: 'mapbox://styles/mapbox/streets-v11',
                            center: [center.coords.longitude, center.coords.latitude],
                            zoom: 12,
                            scrollZoom: true
                        });

                        map.on('load',
                            function(e) {

                                map.addSource('places',
                                    {
                                        'type': 'geojson',
                                        'data': stores
                                    });

                                const geocoder = new MapboxGeocoder({
                                    accessToken: mapboxgl.accessToken,
                                    mapboxgl: mapboxgl,
                                    marker: true,
                                    bbox: [-77.210763, 38.803367, -76.853675, 39.052643]
                                });

                                map.addControl(geocoder, 'top-left');

                                geocoder.on('result',
                                    function(ev) {
                                        const searchResult = ev.result.geometry;
                                    });

                                buildLocationList(stores);
                            });
                    }

                    /**
                     * Assign a unique id to each store. This `id` is used
                     * later to associate each point on the map with a listing
                     * in the sidebar.
                     */
                    stores.features.forEach(function(store, i) {
                        store.properties.id = i;
                    });

                    function addMarkers() {
                        stores.features.forEach(function(marker) {
                            let el = document.createElement("div");
                            el.id = `marker-${marker.properties.id}`;
                            el.className = "marker";

                            new mapboxgl.Marker(el, { offset: [0, -23] })
                                .setLngLat(marker.geometry.coordinates)
                                .addTo(map);

                            el.addEventListener("click",
                                function(e) {
                                    flyToStore(marker);
                                    createPopUp(marker);

                                    let activeItem = document.getElementsByClassName("active");
                                    e.stopPropagation();

                                    if (activeItem[0]) {
                                        activeItem[0].classList.remove("active");
                                    }

                                    let listing = document.getElementById(`listing-${marker.properties.id}`);
                                    listing.classList.add("active");
                                });
                        });
                    }

                    function buildLocationList(data) {
                        data.features.forEach(function(store, i) {
                            const prop = store.properties;

                            const listings = document.getElementById("listings");

                            const listing = listings.appendChild(document.createElement("div"));
                            listing.id = `listing-${prop.id}`;
                            listing.className = "item";

                            const link = listing.appendChild(document.createElement("a"));
                            link.href = "#"; // TODO: complete
                            link.className = "title";
                            link.id = `link-${prop.id}`;
                            link.innerHTML = prop.address;

                            const details = listing.appendChild(document.createElement("div"));
                            details.innerHTML = prop.city;

                            if (prop.name) {
                                details.innerHTML += ` &middot; ${prop.name}`;
                            }
                            if (prop.category) {
                                details.innerHTML += ` &middot; ${prop.category}`;
                            }

                            link.addEventListener("click",
                                function(e) {
                                    for (let i = 0; i < data.features.length; i++) {
                                        if (this.id === `link-${data.features[i].properties.id}`) {
                                            const clickedListing = data.features[i];
                                            flyToStore(clickedListing);
                                            createPopUp(clickedListing);
                                        }
                                    }

                                    const activeItem = document.getElementsByClassName("active");
                                    if (activeItem[0]) {
                                        activeItem[0].classList.remove('active');
                                    }
                                    this.parentNode.classList.add('active');
                                });
                        });
                    }

                    function flyToStore(currentFeature) {
                        map.flyTo({
                            center: currentFeature.geometry.coordinates,
                            zoom: 15
                        });
                    }

                    function createPopUp(currentFeature) {
                        const popUps = document.getElementsByClassName('mapboxgl-popup');
                        if (popUps[0]) popUps[0].remove();
                        const popup = new mapboxgl.Popup({ closeOnClick: false })
                            .setLngLat(currentFeature.geometry.coordinates)
                            .setHTML(
                                '<h3>Sweetgreen</h3>' +
                                '<h4>' +
                                currentFeature.properties.address +
                                '</h4>'
                            )
                            .addTo(map);
                    }

                    /**
                     * Get address for restaurant
                     * @@param id addressId
                     */
                    function getRestaurantAddress(id) {
                        $.ajax({
                            type: "GET",
                            url: `/api/restaurateurs/${id}`,
                            dataType: "JSON",
                            contentType: "application/json; charset=utf-8",
                            success: function (data, status, xhr) {
                                return new Address(data);
                                //return {
                                //    addressLine1: data.addressLine1,
                                //    addressLine2: data.addressLine2,
                                //    number: data.number,
                                //    city: data.city,
                                //    postalCode: data.postalCode,
                                //    country: data.country,
                                //    stateProvince: data.stateProvince,
                                //    longitude: data.longitude,
                                //    latitude: data.latitude
                                //}
                            },
                            error: function() {
                                console.log("Error");
                            }
                        });
                    }
                },
                error: function() {
                    console.log("Error");
                }
            });
        });
    </script>
    }
    }
}