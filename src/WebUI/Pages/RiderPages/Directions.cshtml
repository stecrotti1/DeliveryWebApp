@page "{id:int?}"
@using Microsoft.Extensions.Localization
@model DeliveryWebApp.WebUI.Pages.RiderPages.DirectionsModel
@inject IStringLocalizer<DirectionsModel> localizer
@{
    ViewData["Title"] = "Orders";
    Layout = "../Views/_MapLayout";
    // FIXME: model.restaurateur null
}

@section Head
{
    <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700" rel="stylesheet"/>

    <script src="https://api.tiles.mapbox.com/mapbox-gl-js/v2.4.1/mapbox-gl.js"></script>

    <link href="https://api.tiles.mapbox.com/mapbox-gl-js/v2.4.1/mapbox-gl.css" rel="stylesheet"/>
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.2/mapbox-gl-geocoder.css" type="text/css">
    <link rel="stylesheet" href="/css/directions.min.css"/>
    <link rel="stylesheet" href="/css/images.min.css"/>

    <style type="text/css">
        li {
            margin-top: 1rem;
            margin-left: 1rem;
        }
    </style>
}

<div class="sidebar">
    <div class="heading">
        <h1>@localizer["Delivery of order n°"]: @Model.Order.Id</h1>
    </div>
    <div>
        <ul class="list-unstyled">
            <li>
                <button class="btn btn-primary" id="start">
                    @localizer["Start"]
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-truck" viewBox="0 0 16 16">
                        <path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h9A1.5 1.5 0 0 1 12 3.5V5h1.02a1.5 1.5 0 0 1 1.17.563l1.481 1.85a1.5 1.5 0 0 1 .329.938V10.5a1.5 1.5 0 0 1-1.5 1.5H14a2 2 0 1 1-4 0H5a2 2 0 1 1-3.998-.085A1.5 1.5 0 0 1 0 10.5v-7zm1.294 7.456A1.999 1.999 0 0 1 4.732 11h5.536a2.01 2.01 0 0 1 .732-.732V3.5a.5.5 0 0 0-.5-.5h-9a.5.5 0 0 0-.5.5v7a.5.5 0 0 0 .294.456zM12 10a2 2 0 0 1 1.732 1h.768a.5.5 0 0 0 .5-.5V8.35a.5.5 0 0 0-.11-.312l-1.48-1.85A.5.5 0 0 0 13.02 6H12v4zm-9 1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm9 0a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"/>
                    </svg>
                </button>
            </li>
            <li>
                <form method="post" asp-page-handler="Success" asp-route-id="@Model.Order.Id">
                    <button class="btn btn-success" id="success" type="submit">
                        @localizer["Success"]
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check2" viewBox="0 0 16 16">
                            <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
                        </svg>
                    </button>
                </form>
            </li>
            <li>
                <form method="post" asp-page-handler="Failed" asp-route-id="@Model.Order.Id">
                    <button class="btn btn-danger" id="failed" type="submit">
                        @localizer["Failed"]
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                        </svg>
                    </button>
                </form>
            </li>
        </ul>
    </div>
    <hr/>
    <div id="instructions"></div>
</div>

<div id="map" class="map"></div>

@section Scripts
{
    <script type="text/javascript" src="/js/classes/address.min.js"></script>
    <script type="text/javascript" src="/js/classes/restaurant.min.js"></script>
    <script type="text/javascript" src="/js/classes/order.min.js"></script>

    <script type="text/javascript">

        $(function() {
            mapboxgl.accessToken = 'pk.eyJ1Ijoic3RlY3JvdHRpMSIsImEiOiJja3Bna2kzbHYyaThoMm9ueHl1dzlnaTc1In0.EpALSOaDOmuM8XGS_IQzvA';
            mapboxgl.setRTLTextPlugin('https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js');

            // get restaurant address
            const rAddressReq = new XMLHttpRequest();
            rAddressReq.open("GET", `/api/addresses/${@Model.Restaurateur.RestaurantAddressId}`);
            rAddressReq.onload = function() {
                const j = JSON.parse(rAddressReq.response);
                const restaurantAddress = new Address(
                    j.placeName,
                    j.longitude,
                    j.latitude,
                    j.customerId,
                    j.restaurateurId
                );

                const start = [restaurantAddress.longitude, restaurantAddress.latitude];

                // get delivery address
                const dAddressReq = new XMLHttpRequest();
                dAddressReq.open("GET", `/api/addresses/${@Model.Order.AddressId}`);
                dAddressReq.onload = function() {
                    const i = JSON.parse(dAddressReq.response);
                    const deliveryAddress = new Address(
                        i.placeName,
                        i.longitude,
                        i.latitude,
                        i.customerId,
                        i.restaurateurId
                    );

                    const end = [deliveryAddress.longitude, deliveryAddress.latitude];

                    const map = new mapboxgl.Map({
                        container: 'map',
                        style: 'mapbox://styles/mapbox/streets-v10',
                        center: start, // starting position
                        zoom: 12
                    });

                    // initialize the map canvas to interact with later
                    const canvas = map.getCanvasContainer();

                    function getRoute(end) {
                        const url = `https://api.mapbox.com/directions/v5/mapbox/driving/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${mapboxgl.accessToken}`;

                        var req = new XMLHttpRequest();
                        req.open("GET", url, true);
                        req.onload = function() {
                            const json = JSON.parse(req.response);
                            const data = json.routes[0];
                            const route = data.geometry.coordinates;
                            const geojson = {
                                type: "Feature",
                                properties: {},
                                geometry: {
                                    type: "LineString",
                                    coordinates: route
                                }
                            };

                            // if the route already exists on the map, reset it using setData
                            if (map.getSource('route')) {
                                map.getSource('route').setData(geojson);
                            } else { // otherwise, make a new request
                                map.addLayer({
                                    id: 'route',
                                    type: 'line',
                                    source: {
                                        type: 'geojson',
                                        data: {
                                            type: 'Feature',
                                            properties: {},
                                            geometry: {
                                                type: 'LineString',
                                                coordinates: geojson
                                            }
                                        }
                                    },
                                    layout: {
                                        'line-join': 'round',
                                        'line-cap': 'round'
                                    },
                                    paint: {
                                        'line-color': '#3887be',
                                        'line-width': 5,
                                        'line-opacity': 0.75
                                    }
                                });
                            }
                        };
                        req.send();
                    }

                    map.on('load',
                        function() {
                            // make an initial directions request that
                            // starts and ends at the same location

                            map.addControl(new mapboxgl.FullscreenControl());

                            // Add geolocate control to the map.
                            map.addControl(
                                new mapboxgl.GeolocateControl({
                                    positionOptions: {
                                        enableHighAccuracy: true
                                    },
                                    // When active the map will receive updates to the device's location as it changes.
                                    trackUserLocation: true,
                                    // Draw an arrow next to the location dot to indicate which direction the device is heading.
                                    showUserHeading: true
                                })
                            );

                            // Add starting point to the map
                            map.addLayer({
                                id: 'point',
                                type: 'circle',
                                source: {
                                    type: 'geojson',
                                    data: {
                                        type: 'FeatureCollection',
                                        features: [
                                            {
                                                type: 'Feature',
                                                properties: {},
                                                geometry: {
                                                    type: 'Point',
                                                    coordinates: start
                                                }
                                            }
                                        ]
                                    }
                                },
                                paint: {
                                    'circle-radius': 10,
                                    'circle-color': '#3887be'
                                }
                            });

                            $("#start").on("click",
                                function(e) {
                                    $("#start").disabled = true;

                                    map.flyTo({
                                        center: start,
                                        zoom: 15
                                    });

                                    const delivery = {
                                        type: "FeatureCollection",
                                        features: [
                                            {
                                                type: "Feature",
                                                properties: {},
                                                geometry: {
                                                    type: "Point",
                                                    coordinates: end
                                                }
                                            }
                                        ]
                                    };

                                    map.addLayer({
                                        id: 'end',
                                        type: 'circle',
                                        source: {
                                            type: 'geojson',
                                            data: {
                                                type: 'FeatureCollection',
                                                features: [
                                                    {
                                                        type: 'Feature',
                                                        properties: {},
                                                        geometry: {
                                                            type: 'Point',
                                                            coordinates: end
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        paint: {
                                            'circle-radius': 10,
                                            'circle-color': '#f30'
                                        }
                                    });

                                    getRoute(end);
                                });
                        });
                };
                dAddressReq.send();
            };
            rAddressReq.send();
        });

    </script>
}